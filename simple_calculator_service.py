"""
Simple Calculator & Number Helper for Illiterate Users
Helps with basic math, counting money, measuring land, etc.
"""

import re
import google.generativeai as genai
import os
from dotenv import load_dotenv

load_dotenv()

class SimpleCalculatorService:
    def __init__(self):
        """Initialize calculator service"""
        self.api_key = os.getenv('GEMINI_API_KEY')
        if self.api_key:
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel('gemini-2.5-flash')
        else:
            self.model = None
        
        # Hindi number words
        self.hindi_numbers = {
            '‡§è‡§ï': 1, '‡§¶‡•ã': 2, '‡§§‡•Ä‡§®': 3, '‡§ö‡§æ‡§∞': 4, '‡§™‡§æ‡§Ç‡§ö': 5,
            '‡§õ‡§π': 6, '‡§∏‡§æ‡§§': 7, '‡§Ü‡§†': 8, '‡§®‡•å': 9, '‡§¶‡§∏': 10,
            '‡§ó‡•ç‡§Ø‡§æ‡§∞‡§π': 11, '‡§¨‡§æ‡§∞‡§π': 12, '‡§§‡•á‡§∞‡§π': 13, '‡§ö‡•å‡§¶‡§π': 14, '‡§™‡§Ç‡§¶‡•ç‡§∞‡§π': 15,
            '‡§∏‡•ã‡§≤‡§π': 16, '‡§∏‡§§‡•ç‡§∞‡§π': 17, '‡§Ö‡§†‡§æ‡§∞‡§π': 18, '‡§â‡§®‡•ç‡§®‡•Ä‡§∏': 19, '‡§¨‡•Ä‡§∏': 20,
            '‡§§‡•Ä‡§∏': 30, '‡§ö‡§æ‡§≤‡•Ä‡§∏': 40, '‡§™‡§ö‡§æ‡§∏': 50, '‡§∏‡§æ‡§†': 60,
            '‡§∏‡§§‡•ç‡§§‡§∞': 70, '‡§Ö‡§∏‡•ç‡§∏‡•Ä': 80, '‡§®‡§¨‡•ç‡§¨‡•á': 90, '‡§∏‡•å': 100,
            '‡§π‡§ú‡§æ‡§∞': 1000, '‡§≤‡§æ‡§ñ': 100000, '‡§ï‡§∞‡•ã‡§°‡§º': 10000000
        }
        
        # Units for agriculture/land
        self.land_units = {
            '‡§è‡§ï‡§°‡§º': 'acre', 'bigha': 'bigha', '‡§¨‡•Ä‡§ò‡§æ': 'bigha',
            '‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞': 'hectare', '‡§ó‡•Å‡§Ç‡§†‡§æ': 'guntha'
        }
        
        # Common calculations for farmers/laborers
        self.calc_keywords = [
            '‡§ú‡•ã‡§°‡§º', 'add', 'plus', '‡§î‡§∞', '‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞',
            '‡§ò‡§ü‡§æ', 'subtract', 'minus', '‡§ï‡§Æ',
            '‡§ó‡•Å‡§£‡§æ', 'multiply', 'times', '‡§¨‡§æ‡§∞',
            '‡§≠‡§æ‡§ó', 'divide', '‡§¨‡§æ‡§Ç‡§ü‡•ã', '‡§π‡§ø‡§∏‡•ç‡§∏‡§æ',
            '‡§ï‡•Å‡§≤', 'total', '‡§ú‡•ã‡§°‡§º', '‡§ï‡§ø‡§§‡§®‡§æ'
        ]
    
    def is_configured(self):
        """Check if service is configured"""
        return self.model is not None
    
    def detect_calculation_query(self, query):
        """Detect if query needs calculation"""
        query_lower = query.lower()
        
        # Check for calculation keywords
        has_calc_keyword = any(keyword in query_lower for keyword in self.calc_keywords)
        
        # Check for numbers
        has_numbers = bool(re.search(r'\d+', query)) or any(word in query_lower for word in self.hindi_numbers.keys())
        
        return has_calc_keyword and has_numbers
    
    def solve_with_explanation(self, query):
        """
        Solve calculation and explain in simple terms
        """
        if not self.is_configured():
            return None, "Calculator service not available"
        
        try:
            prompt = f"""
            ‡§§‡•Å‡§Æ ‡§è‡§ï ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§∏‡§∞‡§≤ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ó‡§£‡§ø‡§§ ‡§∏‡§Æ‡§ù‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•ã‡•§
            ‡§è‡§ï ‡§Ö‡§®‡§™‡§¢‡§º ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§®‡•á ‡§§‡•Å‡§Æ‡§∏‡•á ‡§Ø‡§π ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡§æ ‡§π‡•à:
            
            ‡§∏‡§µ‡§æ‡§≤: {query}
            
            ‡§ï‡•É‡§™‡§Ø‡§æ:
            1. ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§ï‡•ã ‡§∏‡§∞‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•ã‡§π‡§∞‡§æ‡§ì
            2. ‡§ö‡§∞‡§£-‡§¶‡§∞-‡§ö‡§∞‡§£ ‡§π‡§≤ ‡§ï‡§∞‡§ï‡•á ‡§¶‡§ø‡§ñ‡§æ‡§ì (‡§¨‡§π‡•Å‡§§ ‡§Ü‡§∏‡§æ‡§® ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á)
            3. ‡§∞‡•ã‡§ú‡§º‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•á ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§ì
            4. ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¨‡§°‡§º‡•á ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§ì: "‡§ú‡§µ‡§æ‡§¨: [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]"
            
            ‡§â‡§¶‡§æ‡§π‡§∞‡§£:
            ‡§∏‡§µ‡§æ‡§≤: 5 ‡§¨‡•ã‡§∞‡•Ä ‡§ö‡§æ‡§µ‡§≤ ‡§π‡•à‡§Ç, ‡§π‡§∞ ‡§¨‡•ã‡§∞‡•Ä ‡§Æ‡•á‡§Ç 50 ‡§ï‡§ø‡§≤‡•ã ‡§π‡•à, ‡§ï‡•Å‡§≤ ‡§ï‡§ø‡§§‡§®‡§æ ‡§ö‡§æ‡§µ‡§≤ ‡§π‡•à?
            
            ‡§ú‡§µ‡§æ‡§¨:
            ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ 5 ‡§¨‡•ã‡§∞‡•Ä ‡§ö‡§æ‡§µ‡§≤ ‡§π‡•à‡§Ç‡•§
            ‡§π‡§∞ ‡§è‡§ï ‡§¨‡•ã‡§∞‡•Ä ‡§Æ‡•á‡§Ç 50 ‡§ï‡§ø‡§≤‡•ã ‡§ö‡§æ‡§µ‡§≤ ‡§π‡•à‡•§
            
            ‡§§‡•ã, 5 ‡§¨‡•ã‡§∞‡•Ä x 50 ‡§ï‡§ø‡§≤‡•ã = 250 ‡§ï‡§ø‡§≤‡•ã
            
            ‡§ú‡§µ‡§æ‡§¨: 250 ‡§ï‡§ø‡§≤‡•ã ‡§ö‡§æ‡§µ‡§≤
            
            ‡§Ö‡§¨ ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π ‡§∏‡§Æ‡§ù‡§æ‡§ì (‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç):
            """
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                clean_text = ' '.join(response.text.strip().split())
                return clean_text, None
            else:
                return None, "‡§π‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ"
                
        except Exception as e:
            return None, f"Error: {str(e)}"
    
    def help_with_money_counting(self, query):
        """Help count money - especially useful for daily wages"""
        if not self.is_configured():
            return None, "Service not available"
        
        try:
            prompt = f"""
            ‡§è‡§ï ‡§Æ‡§ú‡§¶‡•Ç‡§∞/‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ã ‡§™‡•à‡§∏‡•á ‡§ó‡§ø‡§®‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•ã‡•§
            
            ‡§∏‡§µ‡§æ‡§≤: {query}
            
            ‡§∏‡§∞‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç:
            1. ‡§ï‡•Å‡§≤ ‡§™‡•à‡§∏‡•á ‡§ï‡§ø‡§§‡§®‡•á ‡§π‡•à‡§Ç
            2. ‡§Ö‡§ó‡§∞ ‡§®‡•ã‡§ü/‡§∏‡§ø‡§ï‡•ç‡§ï‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§ó‡§ø‡§®‡§§‡•Ä ‡§¨‡§§‡§æ‡§ì
            3. ‡§Ø‡§π ‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§® ‡§ï‡•Ä ‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä/‡§ï‡§Æ‡§æ‡§à ‡§π‡•à
            
            ‡§¨‡§π‡•Å‡§§ ‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§ì‡•§
            
            ‡§ú‡§µ‡§æ‡§¨ (‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç):
            """
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                clean_text = ' '.join(response.text.strip().split())
                return clean_text, None
            else:
                return None, "‡§ó‡§£‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§à"
                
        except Exception as e:
            return None, f"Error: {str(e)}"


# Global instance
_calculator_service = None

def get_calculator_service():
    """Get or create calculator service"""
    global _calculator_service
    if _calculator_service is None:
        _calculator_service = SimpleCalculatorService()
    return _calculator_service


def handle_calculation_query(query, voice_output_func):
    """Handle calculation queries"""
    service = get_calculator_service()
    
    if not service.detect_calculation_query(query):
        return False
    
    if not service.is_configured():
        print("Calculator service not available")
        return False
    
    print(f"Processing calculation: {query}")
    
    # Check if it's about money counting
    money_keywords = ['‡§™‡•à‡§∏‡•á', '‡§∞‡•Å‡§™‡§Ø‡•á', '‡§ï‡§Æ‡§æ‡§à', '‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä', '‡§§‡§®‡§ñ‡•ç‡§µ‡§æ‡§π', '‡§®‡•ã‡§ü']
    is_money = any(keyword in query.lower() for keyword in money_keywords)
    
    if is_money:
        result, error = service.help_with_money_counting(query)
    else:
        result, error = service.solve_with_explanation(query)
    
    if error:
        print(f"Error: {error}")
        return True
    
    if result:
        print(f"Result: {result}")
        voice_output_func(result, lang='hi')
        return True
    
    return False


# Test function
if __name__ == "__main__":
    service = SimpleCalculatorService()
    
    print("=" * 70)
    print("üî¢ Testing Simple Calculator for Illiterate Users")
    print("=" * 70)
    
    if not service.is_configured():
        print("‚ùå Service not configured")
        exit(1)
    
    print("‚úÖ Service ready\n")
    
    test_queries = [
        "5 ‡§¨‡•ã‡§∞‡•Ä ‡§ö‡§æ‡§µ‡§≤ ‡§π‡•à‡§Ç, ‡§π‡§∞ ‡§¨‡•ã‡§∞‡•Ä ‡§Æ‡•á‡§Ç 50 ‡§ï‡§ø‡§≤‡•ã ‡§π‡•à, ‡§ï‡•Å‡§≤ ‡§ï‡§ø‡§§‡§®‡§æ?",
        "‡§Æ‡•á‡§∞‡•Ä 300 ‡§∞‡•Å‡§™‡§Ø‡•á ‡§∞‡•ã‡§ú‡§º ‡§ï‡•Ä ‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä ‡§π‡•à, 10 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡§æ ‡§π‡•ã‡§ó‡§æ?",
        "1000 ‡§∞‡•Å‡§™‡§Ø‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•á 350 ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§ø‡§è, ‡§ï‡§ø‡§§‡§®‡•á ‡§¨‡§ö‡•á?",
        "2 ‡§è‡§ï‡§°‡§º ‡§ú‡§º‡§Æ‡•Ä‡§® ‡§Æ‡•á‡§Ç 50 ‡§ï‡§ø‡§≤‡•ã ‡§¨‡•Ä‡§ú ‡§ö‡§æ‡§π‡§ø‡§è, 5 ‡§è‡§ï‡§°‡§º ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡§æ?",
        "20 ‡§Æ‡§ú‡§º‡§¶‡•Ç‡§∞‡•ã‡§Ç ‡§ï‡•ã 500 ‡§∞‡•Å‡§™‡§Ø‡•á ‡§¨‡§æ‡§Ç‡§ü‡§®‡•á ‡§π‡•à‡§Ç, ‡§π‡§∞ ‡§è‡§ï ‡§ï‡•ã ‡§ï‡§ø‡§§‡§®‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ?",
    ]
    
    for query in test_queries:
        print("\n" + "=" * 70)
        print(f"Q: {query}")
        print("-" * 70)
        
        result, error = service.solve_with_explanation(query)
        if not error:
            print(f"A: {result}")
        else:
            print(f"Error: {error}")
    
    print("\n" + "=" * 70)
    print("‚úÖ Test Complete!")
    print("=" * 70)
