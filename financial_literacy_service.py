"""
Financial Literacy & Assistance Service for Illiterate Users
SDG Goal 1: No Poverty
Helps users understand banking, savings, loans, and financial schemes
"""

import os
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

class FinancialLiteracyService:
    def __init__(self):
        """Initialize financial literacy service"""
        self.api_key = os.getenv('GEMINI_API_KEY')
        if self.api_key:
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel('gemini-2.5-flash')
        else:
            self.model = None
            print("Warning: GEMINI_API_KEY not found")
        
        # Common financial topics for illiterate users
        self.topics = {
            'banking': {
                'keywords': ['‡§¨‡•à‡§Ç‡§ï', '‡§ñ‡§æ‡§§‡§æ', 'account', 'atm', 'passbook', '‡§™‡§æ‡§∏‡§¨‡•Å‡§ï', 'balance', '‡§¨‡•à‡§≤‡•á‡§Ç‡§∏'],
                'help': '‡§¨‡•à‡§Ç‡§ï ‡§ñ‡§æ‡§§‡§æ, ‡§™‡•à‡§∏‡•á ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡§®‡§æ, ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ, ATM ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§®‡§æ'
            },
            'savings': {
                'keywords': ['‡§¨‡§ö‡§§', 'saving', '‡§ú‡§Æ‡§æ', 'deposit', '‡§™‡•à‡§∏‡•á ‡§¨‡§ö‡§æ‡§®‡§æ', 'fixed deposit', '‡§è‡§´‡§°‡•Ä'],
                'help': '‡§™‡•à‡§∏‡•á ‡§¨‡§ö‡§æ‡§®‡§æ, ‡§¨‡§ö‡§§ ‡§ñ‡§æ‡§§‡§æ, ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§™‡•à‡§∏‡•á ‡§∞‡§ñ‡§®‡§æ'
            },
            'loans': {
                'keywords': ['‡§≤‡•ã‡§®', 'loan', '‡§ï‡§∞‡•ç‡§ú', '‡§¨‡•ç‡§Ø‡§æ‡§ú', 'interest', 'emi', '‡§ï‡§ø‡§∏‡•ç‡§§', '‡§â‡§ß‡§æ‡§∞'],
                'help': '‡§≤‡•ã‡§® ‡§ï‡•à‡§∏‡•á ‡§≤‡•á‡§Ç, ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à, EMI ‡§ï‡•à‡§∏‡•á ‡§ö‡•Å‡§ï‡§æ‡§è‡§Ç'
            },
            'insurance': {
                'keywords': ['‡§¨‡•Ä‡§Æ‡§æ', 'insurance', '‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ', '‡§ú‡•Ä‡§µ‡§® ‡§¨‡•Ä‡§Æ‡§æ', '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡•Ä‡§Æ‡§æ'],
                'help': '‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à, ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ, ‡§ú‡•Ä‡§µ‡§® ‡§¨‡•Ä‡§Æ‡§æ, ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ'
            },
            'pension': {
                'keywords': ['‡§™‡•á‡§Ç‡§∂‡§®', 'pension', '‡§¨‡•Å‡§¢‡§º‡§æ‡§™‡§æ', 'retirement', '‡§µ‡•É‡§¶‡•ç‡§ß‡§æ‡§µ‡§∏‡•ç‡§•‡§æ'],
                'help': '‡§™‡•á‡§Ç‡§∂‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ, ‡§¨‡•Å‡§¢‡§º‡§æ‡§™‡•á ‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ, ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§™‡•á‡§Ç‡§∂‡§®'
            },
            'digital_payment': {
                'keywords': ['upi', '‡§Ø‡•Ç‡§™‡•Ä‡§Ü‡§à', 'phonepe', 'paytm', 'google pay', '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü', 'qr code'],
                'help': 'UPI ‡§ï‡•à‡§∏‡•á ‡§ö‡§≤‡§æ‡§è‡§Ç, ‡§´‡•ã‡§® ‡§∏‡•á ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü, QR ‡§ï‡•ã‡§° ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡§®‡§æ'
            },
            'scam_protection': {
                'keywords': ['‡§ß‡•ã‡§ñ‡§æ', 'fraud', 'scam', '‡§´‡•ç‡§∞‡•â‡§°', '‡§†‡§ó‡•Ä', 'otp', 'pin'],
                'help': '‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§∏‡•á ‡§¨‡§ö‡§æ‡§µ, OTP ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§® ‡§¶‡•á‡§Ç, ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§π‡•á‡§Ç'
            },
            'money_management': {
                'keywords': ['‡§ñ‡§∞‡•ç‡§ö', 'budget', '‡§¨‡§ú‡§ü', '‡§π‡§ø‡§∏‡§æ‡§¨', '‡§™‡•à‡§∏‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®', 'expense'],
                'help': '‡§™‡•à‡§∏‡•á ‡§ï‡§æ ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∞‡§ñ‡§®‡§æ, ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§Æ ‡§ï‡§∞‡§®‡§æ, ‡§¨‡§ö‡§§ ‡§¨‡§¢‡§º‡§æ‡§®‡§æ'
            }
        }
    
    def is_configured(self):
        """Check if Gemini API is configured"""
        return self.model is not None
    
    def detect_financial_query(self, query):
        """Detect if query is about financial literacy"""
        query_lower = query.lower()
        
        for topic, info in self.topics.items():
            if any(keyword in query_lower for keyword in info['keywords']):
                return True, topic
        
        return False, None
    
    def get_simple_explanation(self, query, topic=None):
        """
        Get simple, visual explanation suitable for illiterate users
        Uses storytelling and examples from daily life
        """
        if not self.is_configured():
            return None, "Financial literacy service not available"
        
        try:
            # Create a prompt optimized for illiterate users
            prompt = f"""
            ‡§§‡•Å‡§Æ ‡§è‡§ï ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§∏‡§∞‡§≤ ‡§î‡§∞ ‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•ã‡•§
            ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§è‡§ï ‡§Ö‡§®‡§™‡§¢‡§º ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡§æ ‡§Æ‡§ú‡§¶‡•Ç‡§∞ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§®‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§®‡•á ‡§ï‡§≠‡•Ä ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ó‡§Ø‡§æ‡•§
            
            ‡§∏‡§µ‡§æ‡§≤: {query}
            
            ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§§‡§∞‡§π ‡§∏‡§Æ‡§ù‡§æ‡§ì:
            
            1. ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§Ü‡§∏‡§æ‡§® ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç (‡§ú‡•à‡§∏‡•á 5 ‡§∏‡§æ‡§≤ ‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§§‡•á ‡§π‡•à‡§Ç)
            2. ‡§∞‡•ã‡§ú‡§º‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§Ø‡§æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§ì
            3. ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§Æ‡§§ ‡§ï‡§∞‡•ã
            4. 3-4 ‡§õ‡•ã‡§ü‡•á ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§ì
            5. ‡§ö‡§∞‡§£-‡§¶‡§∞-‡§ö‡§∞‡§£ (step by step) ‡§¨‡§§‡§æ‡§ì
            6. ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§µ‡§∞‡•ç‡§ß‡§ï ‡§≤‡§π‡§ú‡•á ‡§Æ‡•á‡§Ç
            7. ‡§Ö‡§ó‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§ß‡•ã‡§ñ‡•á ‡§∏‡•á ‡§¨‡§ö‡§®‡§æ ‡§π‡•à ‡§§‡•ã ‡§ú‡§º‡§∞‡•Ç‡§∞ ‡§¨‡§§‡§æ‡§ì
            
            ‡§â‡§¶‡§æ‡§π‡§∞‡§£:
            - ‡§¨‡•à‡§Ç‡§ï = "‡§¨‡•à‡§Ç‡§ï ‡§Ü‡§™‡§ï‡•á ‡§™‡•à‡§∏‡•ã‡§Ç ‡§ï‡§æ ‡§§‡§ø‡§ú‡•ã‡§∞‡•Ä ‡§π‡•à, ‡§ú‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•á ‡§™‡•à‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç"
            - ATM = "ATM ‡§è‡§ï ‡§Æ‡§∂‡•Ä‡§® ‡§π‡•à ‡§ú‡§π‡§æ‡§Å ‡§∏‡•á ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§ï‡§æ‡§∞‡•ç‡§° ‡§∏‡•á ‡§™‡•à‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡•à‡§∏‡•á ‡§¶‡•Å‡§ï‡§æ‡§® ‡§∏‡•á ‡§∏‡§æ‡§Æ‡§æ‡§® ‡§®‡§ø‡§ï‡§æ‡§≤‡§§‡•á ‡§π‡•à‡§Ç"
            
            ‡§Ö‡§¨ ‡§∏‡§Æ‡§ù‡§æ‡§ì (‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç):
            """
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                clean_text = ' '.join(response.text.strip().split())
                return clean_text, None
            else:
                return None, "‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä"
                
        except Exception as e:
            error_msg = f"Error: {str(e)}"
            print(error_msg)
            return None, "‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à"
    
    def get_step_by_step_guide(self, task):
        """
        Get step-by-step audio guide for tasks like opening bank account, using ATM
        """
        if not self.is_configured():
            return None, "Service not available"
        
        try:
            prompt = f"""
            ‡§è‡§ï ‡§Ö‡§®‡§™‡§¢‡§º ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§ö‡§∞‡§£-‡§¶‡§∞-‡§ö‡§∞‡§£ ‡§¨‡§π‡•Å‡§§ ‡§∏‡§∞‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§ì:
            
            ‡§ï‡§æ‡§Æ: {task}
            
            ‡§π‡§∞ ‡§ö‡§∞‡§£ ‡§ï‡•ã ‡§á‡§∏ ‡§§‡§∞‡§π ‡§¨‡§§‡§æ‡§ì:
            - ‡§™‡§π‡§≤‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡•á‡§Ç
            - ‡§´‡§ø‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡•á‡§Ç
            - ‡§Ü‡§ñ‡§ø‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§ó‡§æ
            
            ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á ‡§õ‡•ã‡§ü‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§∏‡§ø‡§ñ‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§
            ‡§ï‡•ã‡§à ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§∂‡§¨‡•ç‡§¶ ‡§®‡§π‡•Ä‡§Ç‡•§
            5-6 ‡§õ‡•ã‡§ü‡•á ‡§ö‡§∞‡§£‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§ì‡•§
            
            ‡§ú‡§µ‡§æ‡§¨ (‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç):
            """
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                clean_text = ' '.join(response.text.strip().split())
                return clean_text, None
            else:
                return None, "‡§ó‡§æ‡§á‡§° ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä"
                
        except Exception as e:
            return None, f"Error: {str(e)}"
    
    def warn_about_scam(self, query):
        """Detect potential scam scenarios and warn user"""
        scam_keywords = [
            'otp ‡§¶‡•ã', 'pin ‡§¨‡§§‡§æ‡§ì', '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡•ã', 'account number ‡§¨‡§§‡§æ‡§ì',
            '‡§ï‡§æ‡§∞‡•ç‡§° ‡§®‡§Ç‡§¨‡§∞', 'cvv', '‡§≤‡•â‡§ü‡§∞‡•Ä ‡§ú‡•Ä‡§§‡•Ä', '‡§á‡§®‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡§æ', 
            '‡§Æ‡•Å‡§´‡•ç‡§§ ‡§™‡•à‡§∏‡•á', 'free money', 'link ‡§™‡§∞ click'
        ]
        
        query_lower = query.lower()
        
        for keyword in scam_keywords:
            if keyword in query_lower:
                return True, """
                ‚ö†Ô∏è ‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä! ‚ö†Ô∏è
                
                ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç:
                1. ‡§Ö‡§™‡§®‡§æ OTP, PIN, CVV ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§® ‡§¨‡§§‡§æ‡§è‡§Ç - ‡§¨‡•à‡§Ç‡§ï ‡§µ‡§æ‡§≤‡•á ‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§™‡•Ç‡§õ‡§§‡•á!
                2. ‡§ï‡§ø‡§∏‡•Ä ‡§Ö‡§®‡§ú‡§æ‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§® ‡§ï‡§∞‡•á‡§Ç
                3. "‡§≤‡•â‡§ü‡§∞‡•Ä ‡§ú‡•Ä‡§§‡•Ä" ‡§Ø‡§æ "‡§Æ‡•Å‡§´‡•ç‡§§ ‡§™‡•à‡§∏‡•á" ‡§ï‡•á ‡§ù‡§æ‡§Ç‡§∏‡•á ‡§Æ‡•á‡§Ç ‡§® ‡§Ü‡§è‡§Ç
                4. ‡§∏‡§Ç‡§¶‡•á‡§π ‡§π‡•ã ‡§§‡•ã ‡§¨‡•à‡§Ç‡§ï ‡§ú‡§æ‡§ï‡§∞ ‡§ñ‡•Å‡§¶ ‡§™‡•Ç‡§õ‡•á‡§Ç
                5. ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§ú‡§¨‡§∞‡§¶‡§∏‡•ç‡§§‡•Ä ‡§ï‡§∞‡•á ‡§§‡•ã 1930 (‡§∏‡§æ‡§á‡§¨‡§∞ ‡§ï‡•ç‡§∞‡§æ‡§á‡§Æ) ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
                
                ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡§¨‡§∏‡•á ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à! üõ°Ô∏è
                """
        
        return False, None


# Global instance
_financial_service = None

def get_financial_service():
    """Get or create financial literacy service"""
    global _financial_service
    if _financial_service is None:
        _financial_service = FinancialLiteracyService()
    return _financial_service


def handle_financial_query(query, voice_output_func):
    """
    Handle financial literacy queries
    """
    service = get_financial_service()
    
    # Check for scam warning
    is_scam, warning = service.warn_about_scam(query)
    if is_scam:
        print(warning)
        voice_output_func(warning)
        return True
    
    # Detect if it's a financial query
    is_financial, topic = service.detect_financial_query(query)
    
    if not is_financial:
        return False
    
    if not service.is_configured():
        print("Financial literacy service not available")
        return False
    
    print(f"Processing financial query (topic: {topic}): {query}")
    
    # Check if it's a "how to" query
    how_to_keywords = ['‡§ï‡•à‡§∏‡•á', 'how', '‡§§‡§∞‡•Ä‡§ï‡§æ', '‡§∏‡§ø‡§ñ‡§æ‡§ì', '‡§¨‡§§‡§æ‡§ì ‡§ï‡•à‡§∏‡•á']
    is_how_to = any(keyword in query.lower() for keyword in how_to_keywords)
    
    if is_how_to:
        # Provide step-by-step guide
        guide, error = service.get_step_by_step_guide(query)
        if error:
            print(f"Error: {error}")
            return True
        if guide:
            print(f"Guide: {guide}")
            voice_output_func(guide, lang='hi')
            return True
    else:
        # Provide simple explanation
        explanation, error = service.get_simple_explanation(query, topic)
        if error:
            print(f"Error: {error}")
            return True
        if explanation:
            print(f"Explanation: {explanation}")
            voice_output_func(explanation, lang='hi')
            return True
    
    return False


# Test function
if __name__ == "__main__":
    service = FinancialLiteracyService()
    
    print("=" * 70)
    print("üí∞ Testing Financial Literacy Service (SDG Goal 1)")
    print("=" * 70)
    
    if not service.is_configured():
        print("‚ùå Gemini API not configured")
        exit(1)
    
    print("‚úÖ Service configured\n")
    
    # Test queries from illiterate users
    test_queries = [
        "‡§¨‡•à‡§Ç‡§ï ‡§Æ‡•á‡§Ç ‡§ñ‡§æ‡§§‡§æ ‡§ï‡•à‡§∏‡•á ‡§ñ‡•ã‡§≤‡•á‡§Ç?",
        "ATM ‡§∏‡•á ‡§™‡•à‡§∏‡•á ‡§ï‡•à‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç?",
        "‡§≤‡•ã‡§® ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?",
        "UPI ‡§ï‡•à‡§∏‡•á ‡§ö‡§≤‡§æ‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§™‡•à‡§∏‡•á ‡§¨‡§ö‡§æ‡§®‡•á ‡§ï‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à?",
        "OTP ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?",  # Scam test
    ]
    
    for query in test_queries:
        print("\n" + "=" * 70)
        print(f"Q: {query}")
        print("-" * 70)
        
        # Check for scam
        is_scam, warning = service.warn_about_scam(query)
        if is_scam:
            print(warning)
            continue
        
        # Get explanation
        is_financial, topic = service.detect_financial_query(query)
        if is_financial:
            print(f"Topic: {topic}")
            explanation, error = service.get_simple_explanation(query, topic)
            if not error:
                print(f"A: {explanation}")
            else:
                print(f"Error: {error}")
    
    print("\n" + "=" * 70)
    print("‚úÖ Test Complete!")
    print("=" * 70)
