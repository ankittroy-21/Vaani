"""
Emergency Assistance Service for Illiterate Users
Quick access to emergency numbers, basic first aid, and crisis helplines
"""

class EmergencyAssistanceService:
    def __init__(self):
        """Initialize emergency service with important numbers"""
        
        # Critical emergency numbers
        self.emergency_numbers = {
            'police': {
                'number': '100',
                'name_hi': 'рдкреБрд▓рд┐рд╕',
                'when': 'рдЪреЛрд░реА, рд▓рдбрд╝рд╛рдИ, рдЦрддрд░рд╛'
            },
            'ambulance': {
                'number': '108',
                'name_hi': 'рдПрдореНрдмреБрд▓реЗрдВрд╕',
                'when': 'рдмреАрдорд╛рд░реА, рдЪреЛрдЯ, рджреБрд░реНрдШрдЯрдирд╛'
            },
            'fire': {
                'number': '101',
                'name_hi': 'рдлрд╛рдпрд░ рдмреНрд░рд┐рдЧреЗрдб',
                'when': 'рдЖрдЧ рд▓рдЧрдирд╛'
            },
            'women_helpline': {
                'number': '1091',
                'name_hi': 'рдорд╣рд┐рд▓рд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
                'when': 'рдорд╣рд┐рд▓рд╛рдУрдВ рдХреА рд╕реБрд░рдХреНрд╖рд╛, рдШрд░реЗрд▓реВ рд╣рд┐рдВрд╕рд╛'
            },
            'child_helpline': {
                'number': '1098',
                'name_hi': 'рдмрд╛рд▓ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
                'when': 'рдмрдЪреНрдЪреЛрдВ рдХреА рд╕рдорд╕реНрдпрд╛, рдЧреБрдо рдмрдЪреНрдЪреЗ'
            },
            'cyber_crime': {
                'number': '1930',
                'name_hi': 'рд╕рд╛рдЗрдмрд░ рдХреНрд░рд╛рдЗрдо',
                'when': 'рдСрдирд▓рд╛рдЗрди рдзреЛрдЦрд╛рдзрдбрд╝реА, UPI рдлреНрд░реЙрдб'
            },
            'disaster': {
                'number': '1078',
                'name_hi': 'рдЖрдкрджрд╛ рдкреНрд░рдмрдВрдзрди',
                'when': 'рдмрд╛рдврд╝, рднреВрдХрдВрдк, рддреВрдлрд╛рди'
            },
            'farmer_helpline': {
                'number': '1800-180-1551',
                'name_hi': 'рдХрд┐рд╕рд╛рди рдХреЙрд▓ рд╕реЗрдВрдЯрд░',
                'when': 'рдлрд╕рд▓ рдХреА рд╕рдорд╕реНрдпрд╛, рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣'
            },
            'covid': {
                'number': '1075',
                'name_hi': 'рдХреЛрд░реЛрдирд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
                'when': 'рдХреЛрд░реЛрдирд╛ рдХреЗ рд▓рдХреНрд╖рдг, рдЯреЗрд╕реНрдЯ, рд╡реИрдХреНрд╕реАрди'
            }
        }
        
        # Detection keywords
        self.emergency_keywords = {
            'help': ['рдорджрдж', 'help', 'рдмрдЪрд╛рдУ', 'emergency', 'рддреБрд░рдВрдд', 'urgent'],
            'health': ['рдмреАрдорд╛рд░', 'рдЪреЛрдЯ', 'рджрд░реНрдж', 'рдЦреВрди', 'рдмреЗрд╣реЛрд╢', 'рджреБрд░реНрдШрдЯрдирд╛', 'accident'],
            'safety': ['рдЪреЛрд░', 'рд▓рдбрд╝рд╛рдИ', 'рдбрд░', 'рдЦрддрд░рд╛', 'рдорд╛рд░рдкреАрдЯ', 'рд╣рд┐рдВрд╕рд╛'],
            'fire': ['рдЖрдЧ', 'fire', 'рдзреБрдЖрдВ', 'рдЬрд▓ рд░рд╣рд╛'],
            'women': ['рдЫреЗрдбрд╝рдЫрд╛рдбрд╝', 'рдкрд░реЗрд╢рд╛рди', 'рдорд╣рд┐рд▓рд╛', 'рд▓рдбрд╝рдХреА'],
            'fraud': ['рдзреЛрдЦрд╛', 'fraud', 'рдардЧреА', 'рдкреИрд╕реЗ рдЪреЛрд░реА', 'рдлреНрд░реЙрдб']
        }
        
        # Basic first aid in simple Hindi
        self.first_aid = {
            'bleeding': """
            рдЦреВрди рдмрд╣ рд░рд╣рд╛ рд╣реИ рддреЛ:
            1. рд╕рд╛рдл рдХрдкрдбрд╝рд╛ рд▓реЗрдХрд░ рдШрд╛рд╡ рдкрд░ рджрдмрд╛рдХрд░ рд░рдЦреЗрдВ
            2. рдШрд╛рд╡ рдХреЛ рдКрдкрд░ рдЙрдард╛рдПрдВ (рдЕрдЧрд░ рд╣рд╛рде/рдкреИрд░ рд╣реИ)
            3. рдХрдкрдбрд╝рд╛ рднреАрдЧ рдЬрд╛рдП рддреЛ рдКрдкрд░ рд╕реЗ рдФрд░ рдХрдкрдбрд╝рд╛ рд░рдЦреЗрдВ
            4. рддреБрд░рдВрдд 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
            5. рдШрд╛рд╡ рдХреЛ рдкрд╛рдиреА рд╕реЗ рдзреЛрдПрдВ (рдЕрдЧрд░ рд╕рд╛рдл рдкрд╛рдиреА рд╣реИ)
            """,
            'burn': """
            рдЬрд▓рдиреЗ рдкрд░:
            1. рдЬрд▓реНрджреА рд╕реЗ рдардВрдбреЗ рдкрд╛рдиреА рдореЗрдВ рд░рдЦреЗрдВ (10-15 рдорд┐рдирдЯ)
            2. рдмрд░реНрдл рдордд рд▓рдЧрд╛рдПрдВ
            3. рддреЗрд▓, рдордХреНрдЦрди, рдЯреВрдердкреЗрд╕реНрдЯ рдордд рд▓рдЧрд╛рдПрдВ
            4. рд╕рд╛рдл рдХрдкрдбрд╝реЗ рд╕реЗ рдврдХреЗрдВ
            5. рдЬрд╝реНрдпрд╛рджрд╛ рдЬрд▓рдиреЗ рдкрд░ 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
            """,
            'snakebite': """
            рд╕рд╛рдВрдк рдХрд╛рдЯрдиреЗ рдкрд░:
            1. рдмрд┐рд▓реНрдХреБрд▓ рд╢рд╛рдВрдд рд░рд╣реЗрдВ, рд╣рд┐рд▓реЗрдВ-рдбреБрд▓реЗрдВ рдирд╣реАрдВ
            2. рдХрд╛рдЯреА рд╣реБрдИ рдЬрдЧрд╣ рдХреЛ рджрд┐рд▓ рд╕реЗ рдиреАрдЪреЗ рд░рдЦреЗрдВ
            3. рддреБрд░рдВрдд 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
            4. рдХрд╕рдХреЗ рдкрдЯреНрдЯреА рди рдмрд╛рдВрдзреЗрдВ
            5. рдЬрдбрд╝реА-рдмреВрдЯреА, рдЭрд╛рдбрд╝-рдлреВрдВрдХ рдкрд░ рд╕рдордп рдмрд░реНрдмрд╛рдж рди рдХрд░реЗрдВ
            6. рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд▓реНрджреА рдЬрд╛рдПрдВ
            """,
            'electric_shock': """
            рдмрд┐рдЬрд▓реА рд▓рдЧрдиреЗ рдкрд░:
            1. рдкрд╣рд▓реЗ рдмрд┐рдЬрд▓реА рдХрд╛ рд╕реНрд╡рд┐рдЪ рдмрдВрдж рдХрд░реЗрдВ
            2. рд▓рдХрдбрд╝реА рдпрд╛ рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рд╕реЗ рд╡реНрдпрдХреНрддрд┐ рдХреЛ рд╣рдЯрд╛рдПрдВ (рд╣рд╛рде рд╕реЗ рдирд╣реАрдВ)
            3. рдЕрдЧрд░ рдмреЗрд╣реЛрд╢ рд╣реИ рддреЛ 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
            4. рдЪреЗрд╣рд░реЗ рдкрд░ рдкрд╛рдиреА рдХреЗ рдЫреАрдВрдЯреЗ рдорд╛рд░реЗрдВ
            5. рдЦреБрд▓реА рд╣рд╡рд╛ рдореЗрдВ рд▓рд┐рдЯрд╛рдПрдВ
            """,
            'unconscious': """
            рдмреЗрд╣реЛрд╢ рд╣реЛрдиреЗ рдкрд░:
            1. рдЬрд▓реНрджреА рд╕реЗ 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
            2. рдХрд░рд╡рдЯ рдХреЗ рдмрд▓ рд▓рд┐рдЯрд╛рдПрдВ (рд╕реАрдзрд╛ рдирд╣реАрдВ)
            3. рдХреЙрд▓рд░ рдвреАрд▓рд╛ рдХрд░реЗрдВ
            4. рдореБрдВрд╣ рдореЗрдВ рдХреБрдЫ рди рдбрд╛рд▓реЗрдВ
            5. рдЦреБрд▓реА рд╣рд╡рд╛ рджреЗрдВ
            6. рдЪреЗрд╣рд░реЗ рдкрд░ рдкрд╛рдиреА рдХреЗ рдЫреАрдВрдЯреЗ рдорд╛рд░реЗрдВ
            """
        }
    
    def detect_emergency(self, query):
        """Detect if query is an emergency"""
        query_lower = query.lower()
        
        # Check for emergency keywords
        for category, keywords in self.emergency_keywords.items():
            if any(keyword in query_lower for keyword in keywords):
                return True, category
        
        return False, None
    
    def get_emergency_number(self, situation):
        """Get appropriate emergency number for situation"""
        query_lower = situation.lower()
        
        # Check each emergency type
        if any(word in query_lower for word in ['рдмреАрдорд╛рд░', 'рдЪреЛрдЯ', 'рджреБрд░реНрдШрдЯрдирд╛', 'accident', 'рдПрдореНрдмреБрд▓реЗрдВрд╕']):
            return self.emergency_numbers['ambulance']
        
        elif any(word in query_lower for word in ['рдкреБрд▓рд┐рд╕', 'police', 'рдЪреЛрд░', 'рд▓рдбрд╝рд╛рдИ']):
            return self.emergency_numbers['police']
        
        elif any(word in query_lower for word in ['рдЖрдЧ', 'fire', 'рдЬрд▓ рд░рд╣рд╛']):
            return self.emergency_numbers['fire']
        
        elif any(word in query_lower for word in ['рдорд╣рд┐рд▓рд╛', 'рд▓рдбрд╝рдХреА', 'рдЫреЗрдбрд╝рдЫрд╛рдбрд╝']):
            return self.emergency_numbers['women_helpline']
        
        elif any(word in query_lower for word in ['рдзреЛрдЦрд╛', 'fraud', 'рдардЧреА', 'upi']):
            return self.emergency_numbers['cyber_crime']
        
        elif any(word in query_lower for word in ['рдлрд╕рд▓', 'рдЦреЗрдд', 'рдХрд┐рд╕рд╛рди']):
            return self.emergency_numbers['farmer_helpline']
        
        else:
            return self.emergency_numbers['police']  # Default to police
    
    def get_first_aid_guidance(self, situation):
        """Get simple first aid guidance"""
        query_lower = situation.lower()
        
        if any(word in query_lower for word in ['рдЦреВрди', 'bleeding', 'рдХрдЯрд╛', 'рдШрд╛рд╡']):
            return self.first_aid['bleeding']
        
        elif any(word in query_lower for word in ['рдЬрд▓ рдЧрдпрд╛', 'burn', 'рдЬрд▓рдирд╛', 'рдЖрдЧ рд▓рдЧреА']):
            return self.first_aid['burn']
        
        elif any(word in query_lower for word in ['рд╕рд╛рдВрдк', 'snake', 'рдХрд╛рдЯрд╛']):
            return self.first_aid['snakebite']
        
        elif any(word in query_lower for word in ['рдмрд┐рдЬрд▓реА', 'shock', 'рдХрд░рдВрдЯ']):
            return self.first_aid['electric_shock']
        
        elif any(word in query_lower for word in ['рдмреЗрд╣реЛрд╢', 'unconscious', 'рдЧрд┐рд░ рдЧрдпрд╛']):
            return self.first_aid['unconscious']
        
        return None
    
    def get_all_emergency_numbers(self):
        """Get formatted list of all emergency numbers"""
        message = "ЁЯЪи рдЬрд╝рд░реВрд░реА рдирдВрдмрд░:\n\n"
        
        for key, info in self.emergency_numbers.items():
            message += f"ЁЯУЮ {info['name_hi']}: {info['number']}\n"
            message += f"   рдХрдм: {info['when']}\n\n"
        
        return message


# Global instance
_emergency_service = None

def get_emergency_service():
    """Get or create emergency service"""
    global _emergency_service
    if _emergency_service is None:
        _emergency_service = EmergencyAssistanceService()
    return _emergency_service


def handle_emergency_query(query, voice_output_func):
    """Handle emergency queries"""
    service = get_emergency_service()
    
    is_emergency, category = service.detect_emergency(query)
    
    if not is_emergency:
        # Check if asking for emergency numbers list
        if any(word in query.lower() for word in ['emergency number', 'рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди', 'helpline', 'рдирдВрдмрд░ рдмрддрд╛рдУ']):
            numbers = service.get_all_emergency_numbers()
            print(numbers)
            voice_output_func(numbers, lang='hi')
            return True
        return False
    
    print(f"тЪая╕П EMERGENCY DETECTED: {category}")
    
    # Get appropriate emergency number
    emergency_info = service.get_emergency_number(query)
    
    response = f"ЁЯЪи рддреБрд░рдВрдд {emergency_info['name_hi']} рдХреЛ рдлреЛрди рдХрд░реЗрдВ!\n\n"
    response += f"ЁЯУЮ рдирдВрдмрд░: {emergency_info['number']}\n\n"
    
    # Get first aid if applicable
    first_aid = service.get_first_aid_guidance(query)
    if first_aid:
        response += "рдкрд╣рд▓реА рд╕рд╣рд╛рдпрддрд╛:\n" + first_aid + "\n\n"
    
    response += "тП░ рдЬрд▓реНрджреА рдХрд░реЗрдВ! рджреЗрд░ рдордд рдХрд░реЗрдВ!"
    
    print(response)
    voice_output_func(response, lang='hi')
    
    return True


# Test function
if __name__ == "__main__":
    service = EmergencyAssistanceService()
    
    print("=" * 70)
    print("ЁЯЪи Testing Emergency Assistance Service")
    print("=" * 70)
    
    test_queries = [
        "рдореЗрд░реА рдорд╛рдВ рдмреАрдорд╛рд░ рд╣реИрдВ, рдорджрдж рдЪрд╛рд╣рд┐рдП",
        "рдШрд░ рдореЗрдВ рдЖрдЧ рд▓рдЧ рдЧрдИ",
        "рдЪреЛрд░ рдШрд░ рдореЗрдВ рдШреБрд╕ рдЧрдпрд╛",
        "рд╕рд╛рдВрдк рдиреЗ рдХрд╛рдЯ рд▓рд┐рдпрд╛",
        "рдЦреВрди рдмрд╣ рд░рд╣рд╛ рд╣реИ",
        "UPI рдлреНрд░реЙрдб рд╣реЛ рдЧрдпрд╛",
        "рд╕рднреА emergency numbers рдмрддрд╛рдУ"
    ]
    
    for query in test_queries:
        print("\n" + "=" * 70)
        print(f"Q: {query}")
        print("-" * 70)
        
        is_emergency, category = service.detect_emergency(query)
        
        if is_emergency:
            print(f"Category: {category}")
            emergency_info = service.get_emergency_number(query)
            print(f"\nЁЯУЮ {emergency_info['name_hi']}: {emergency_info['number']}")
            
            first_aid = service.get_first_aid_guidance(query)
            if first_aid:
                print(f"\nFirst Aid:\n{first_aid}")
        else:
            if 'рдирдВрдмрд░' in query or 'number' in query:
                print(service.get_all_emergency_numbers())
    
    print("\n" + "=" * 70)
    print("тЬЕ Test Complete!")
    print("=" * 70)
